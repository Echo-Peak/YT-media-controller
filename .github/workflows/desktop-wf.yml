name: Build Desktop Installer
on:
  push:
    branches: ["main", "pipeline-testing"]

permissions:
  contents: write

jobs:
  build-desktop-installer-asset:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Set version/tag variable
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            TAG_TYPE="prod"
          else
            TAG_TYPE="dev"
          fi
          VERSION="v1.0.0-${TAG_TYPE}.${{ github.run_number }}"
          echo "TAG_VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Fetch external binaries
        run: node ./backend/scripts/installExternalDeps.js

      - name: Setup Node with Yarn cache
        uses: actions/setup-node@v4
        with:
          node-version: "22.12.0"
          cache: "yarn"

      - name: Install NPM modules
        run: yarn
        shell: bash

      - name: Restore NuGet packages
        run: |
          nuget restore ./backend/YTMediaControllerSrv/YTMediaControllerSrv.sln

      - name: Build backend service
        run:
          msbuild ./backend/YTMediaControllerSrv/YTMediaControllerSrv.sln
          /p:Configuration=Release

      - name: Build installer
        run: npm run package

      - name: Create Git tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag $TAG_VERSION
          git push origin $TAG_VERSION
        shell: bash

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: $TAG_VERSION
          release_name: Release $TAG_VERSION
          draft: ${{ github.ref_name != 'main' }}
          prerelease: false

      - name: Upload installer asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/YoutubeMediaControllerInstaller.exe
          asset_name: YoutubeMediaControllerInstaller.exe
          asset_content_type: application/octet-stream
